// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-upcoming-feature StrictConcurrency -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name AmplitudeSessionReplay
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import AVFoundation
import Accelerate
@_exported import AmplitudeCore
@_exported import AmplitudeSessionReplay
import AmplitudeSessionReplay_Private
import CommonCrypto
import Compression
import CoreGraphics
import Foundation
import IOSurface
import MapKit
import Metal
import Network
import QuartzCore
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
extension UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var amp_isBlocked: Swift.Bool {
    @objc get
    @objc set
  }
}
extension CoreGraphics.CGImage {
  public func cropping(contentsRect: CoreFoundation.CGRect) -> CoreGraphics.CGImage?
}
@objc public enum MaskLevel : Swift.Int, Swift.CustomStringConvertible {
  case light = 0
  case medium = 1
  case conservative = 2
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func amp_setBlocked(_ blocked: Swift.Bool) -> some SwiftUICore.View
  
}
@objc(AMPSessionReplayPlugin) public class SessionReplayPlugin : ObjectiveC.NSObject, AmplitudeCore.UniversalPlugin {
  @objc(AMPSessionReplayPluginConfig) @objcMembers public class Config : ObjectiveC.NSObject {
    @objc final public let sampleRate: Swift.Float
    @objc final public let maskLevel: AmplitudeSessionReplay.MaskLevel
    @objc final public let enableRemoteConfig: Swift.Bool
    @objc final public let webviewMappings: [Swift.String : Swift.String]
    @objc final public let autoStart: Swift.Bool
    @objc final public let captureWebViews: Swift.Bool
    @objc public init(sampleRate: Swift.Float = 0.0, maskLevel: AmplitudeSessionReplay.MaskLevel = .medium, enableRemoteConfig: Swift.Bool = true, webviewMappings: [Swift.String : Swift.String] = [:], autoStart: Swift.Bool = true, captureWebViews: Swift.Bool = false)
    @objc deinit
  }
  public static let name: Swift.String
  public var name: Swift.String? {
    get
  }
  @objc public var sessionReplay: AmplitudeSessionReplay.SessionReplay?
  @objc convenience public init(sampleRate: Swift.Float = 0.0, maskLevel: AmplitudeSessionReplay.MaskLevel = .medium, enableRemoteConfig: Swift.Bool = true, webviewMappings: [Swift.String : Swift.String] = [:], autoStart: Swift.Bool = true, captureWebViews: Swift.Bool = false)
  @objc public init(config: AmplitudeSessionReplay.SessionReplayPlugin.Config = Config())
  public func setup(analyticsClient: any AmplitudeCore.AnalyticsClient, amplitudeContext: AmplitudeCore.AmplitudeContext)
  public func execute<Event>(_ event: inout Event) where Event : AmplitudeCore.AnalyticsEvent
  public func onIdentityChanged(_ identity: any AmplitudeCore.AnalyticsIdentity)
  public func onSessionIdChanged(_ sessionId: Swift.Int64)
  public func onOptOutChanged(_ optOut: Swift.Bool)
  @objc public func start()
  @objc public func stop()
  public func teardown()
  @objc deinit
}
extension AmplitudeCore.PluginHost {
  public var sessionReplay: AmplitudeSessionReplay.SessionReplay? {
    get
  }
}
extension AmplitudeSessionReplay.SessionReplayPlugin : AmplitudeCore.InterfaceSignalProvider {
  public var isProviding: Swift.Bool {
    get
  }
  public func addInterfaceSignalReceiver(_ receiver: any AmplitudeCore.InterfaceSignalReceiver)
  public func removeInterfaceSignalReceiver(_ receiver: any AmplitudeCore.InterfaceSignalReceiver)
}
public typealias SessionId = Swift.Int64
public typealias DeviceId = Swift.String
@objc(AMPSessionReplay) final public class SessionReplay : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc final public let apiKey: Swift.String
  @objc final public let logger: any AmplitudeCore.CoreLogger
  @objc final public let enableRemoteConfig: Swift.Bool
  @objc final public var sampleRate: Swift.Float {
    @objc get
  }
  @objc final public var maskLevel: AmplitudeSessionReplay.MaskLevel {
    get
  }
  @objc final public var optOut: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var sessionId: AmplitudeSessionReplay.SessionId {
    @objc get
    @objc set
  }
  @objc final public var deviceId: AmplitudeSessionReplay.DeviceId? {
    @objc get
    @objc set
  }
  @objc final public var additionalEventProperties: [Swift.String : Any] {
    @objc get
  }
  @objc public init(apiKey: Swift.String, deviceId: AmplitudeSessionReplay.DeviceId? = nil, sessionId: AmplitudeSessionReplay.SessionId = -1, optOut: Swift.Bool = false, sampleRate: Swift.Float = 0.0, webviewMappings: [Swift.String : Swift.String] = [:], logger: (any AmplitudeCore.CoreLogger)? = nil, serverZone: AmplitudeCore.ServerZone = .US, maskLevel: AmplitudeSessionReplay.MaskLevel = .medium, enableRemoteConfig: Swift.Bool = true, remoteConfigClient: AmplitudeCore.RemoteConfigClient? = nil, captureWebViews: Swift.Bool = false)
  @objc final public func start()
  @objc final public func stop()
  @objc final public func flush()
  @objc deinit
}
extension QuartzCore.CATransform3D : Swift.Equatable {
  public static func == (lhs: QuartzCore.CATransform3D, rhs: QuartzCore.CATransform3D) -> Swift.Bool
}
extension AmplitudeSessionReplay.MaskLevel : Swift.Equatable {}
extension AmplitudeSessionReplay.MaskLevel : Swift.Hashable {}
extension AmplitudeSessionReplay.MaskLevel : Swift.RawRepresentable {}
