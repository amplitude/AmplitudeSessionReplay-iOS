// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AmplitudeSessionReplay
import Accelerate
@_exported import AmplitudeSessionReplay
import CoreImage.CIFilterBuiltins
import CommonCrypto
import Compression
import CoreImage
import Foundation
import Network
import QuartzCore
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var amp_isBlocked: Swift.Bool {
    @objc get
    @objc set
  }
}
@objc public protocol Logger : Swift.Sendable {
  @objc func error(message: Swift.String)
  @objc func warn(message: Swift.String)
  @objc func log(message: Swift.String)
  @objc func debug(message: Swift.String)
}
extension SwiftUI.View {
  public func amp_setBlocked(_ blocked: Swift.Bool) -> some SwiftUI.View
  
}
public typealias SessionId = Swift.Int64
public typealias DeviceId = Swift.String
@objc final public class SessionReplay : ObjectiveC.NSObject {
  @objc final public let apiKey: Swift.String
  @objc final public let sampleRate: Swift.Float
  @objc final public let optOut: Swift.Bool
  @objc final public let logger: any AmplitudeSessionReplay.Logger
  @objc final public var sessionId: AmplitudeSessionReplay.SessionId {
    @objc get
    @objc set
  }
  @objc final public var deviceId: AmplitudeSessionReplay.DeviceId? {
    @objc get
    @objc set
  }
  @objc final public var additionalEventProperties: [Swift.String : Any] {
    @objc get
  }
  @objc public init(apiKey: Swift.String, deviceId: AmplitudeSessionReplay.DeviceId? = nil, sessionId: AmplitudeSessionReplay.SessionId = -1, optOut: Swift.Bool = false, sampleRate: Swift.Float = 1.0, logger: (any AmplitudeSessionReplay.Logger)? = nil, serverZone: AmplitudeSessionReplay.ServerZone = .US, serverUrl: Swift.String? = nil)
  @objc final public func start()
  @objc final public func stop()
  @objc final public func flush()
  @objc deinit
}
extension QuartzCore.CATransform3D : Swift.Equatable {
  public static func == (lhs: QuartzCore.CATransform3D, rhs: QuartzCore.CATransform3D) -> Swift.Bool
}
@objc public enum ServerZone : Swift.Int {
  case US
  case EU
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension AmplitudeSessionReplay.ServerZone : Swift.Equatable {}
extension AmplitudeSessionReplay.ServerZone : Swift.Hashable {}
extension AmplitudeSessionReplay.ServerZone : Swift.RawRepresentable {}
